<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ArrayList实现的接口</title>
    <link href="/2022/10/05/ArrayList%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%8E%A5%E5%8F%A3/"/>
    <url>/2022/10/05/ArrayList%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h3><pre><code class="hljs">ArrayList类继承了List集合实现了RandomAccess、Cloneable、java.io.Serializable接口</code></pre><p>这些接口里面什么都没有，就相当于一个标记类</p><h3 id="二、对这些标记类的认识"><a href="#二、对这些标记类的认识" class="headerlink" title="二、对这些标记类的认识"></a>二、对这些标记类的认识</h3><h4 id="1、实现RandomAccess接口"><a href="#1、实现RandomAccess接口" class="headerlink" title="1、实现RandomAccess接口"></a>1、实现RandomAccess接口</h4><p> ArraryList实现 RandomAccess 接口的目的，用来表明其支持快速（通常是固定时间）随机访问。此接口的主要目的是允许一般的算法更改其行为，从而在将其应用到随机或连续访问列表时能提供良好的性能。<br>拿ArrayList和linkedList举例来说，ArrayList实现了此接口，底层是数组，查询快，增删慢，使用for循环；而LinkedList没有实现，底层是链表，查询慢，增删快，使用iterator迭代器循环；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomAccessTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(List list)</span>&#123;<br><br>        <span class="hljs-keyword">if</span> (list <span class="hljs-keyword">instanceof</span> RandomAccess)&#123;<br>            System.out.println(<span class="hljs-string">&quot;实现了RandomAccess接口，不使用迭代器&quot;</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; list.size();i++)&#123;<br>                System.out.println(list.get(i));<br>            &#125;<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;没实现RandomAccess接口，使用迭代器&quot;</span>);<br><br>            <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> list.iterator();<br>            <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>                System.out.println(it.next());<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomAccessTimeTest</span> &#123;<br><br>    <span class="hljs-comment">//使用for循环遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">traverseByLoop</span><span class="hljs-params">(List list)</span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; list.size();i++)&#123;<br>            list.get(i);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">return</span> endTime-startTime;<br>    &#125;<br><br>    <span class="hljs-comment">//使用迭代器遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">traverseByIterator</span><span class="hljs-params">(List list)</span>&#123;<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> list.iterator();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            iterator.next();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">return</span> endTime-startTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//加入数据</span><br>        List&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">30000</span>;i++)&#123;<br>            arrayList.add(<span class="hljs-string">&quot;&quot;</span> + i);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">loopTime</span> <span class="hljs-operator">=</span> RandomAccessTimeTest.traverseByLoop(arrayList);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">iteratorTime</span> <span class="hljs-operator">=</span> RandomAccessTimeTest.traverseByIterator(arrayList);<br>        System.out.println(<span class="hljs-string">&quot;ArrayList:&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;for循环遍历时间:&quot;</span> + loopTime);<br>        System.out.println(<span class="hljs-string">&quot;迭代器遍历时间:&quot;</span> + iteratorTime);<br><br>        List&lt;String&gt; linkedList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-comment">//加入数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">30000</span>;i++)&#123;<br>            linkedList.add(<span class="hljs-string">&quot;&quot;</span> + i);<br>        &#125;<br>        loopTime = RandomAccessTimeTest.traverseByLoop(linkedList);<br>        iteratorTime = RandomAccessTimeTest.traverseByIterator(linkedList);<br>        System.out.println(<span class="hljs-string">&quot;LinkedList:&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;for循环遍历时间:&quot;</span> + loopTime);<br>        System.out.println(<span class="hljs-string">&quot;迭代器遍历时间:&quot;</span> + iteratorTime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：<br>ArrayList: for 循环遍历时间: 3 迭代器遍历时间: 7<br>LinkedList: for 循环遍历时间: 2435 迭代器遍历时间: 3<br>结论：<br>ArrayList 使用 for 循环遍历优于迭代器遍历<br>LinkedList 使用 迭代器遍历优于 for 循环遍历<br>根据以上结论便可利用 RandomAccess 在遍历前进行判断，根据 List 的不同子类选择不同的遍历方式， 提升算法性能。</p><h4 id="2、实现Serializable接口"><a href="#2、实现Serializable接口" class="headerlink" title="2、实现Serializable接口"></a>2、实现Serializable接口</h4><pre><code class="hljs">实现了java.io.Serializable接口，就表示ArrayList对象支持序列化什么是序列化？代码说明下</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectOutStream_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <br>        <span class="hljs-comment">//序列化后，保存的文件格式，不是存文本，而是按照他的格式来保存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\data.dat&quot;</span>;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath));<br>        <span class="hljs-comment">//序列化数据到 e:\data.dat</span><br>        oos.writeInt(<span class="hljs-number">100</span>);<span class="hljs-comment">// int -&gt; Integer (实现了 Serializable)</span><br>        oos.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">// boolean -&gt; Boolean (实现了 Serializable)</span><br>        oos.writeChar(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">// char -&gt; Character (实现了 Serializable)</span><br>        oos.writeDouble(<span class="hljs-number">9.5</span>);<span class="hljs-comment">// double -&gt; Double (实现了 Serializable)</span><br>        oos.writeUTF(<span class="hljs-string">&quot;韩顺平教育&quot;</span>);<span class="hljs-comment">//String</span><br>        <span class="hljs-comment">//保存一个 dog 对象</span><br>        oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;白色&quot;</span>));<br>        oos.close();<br>        System.out.println(<span class="hljs-string">&quot;数据保存完毕(序列化形式)&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span> <span class="hljs-params">(String name,<span class="hljs-type">int</span> age,String color)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.color = coloe<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>  如果Dog没有实现序列化将会报错！！！<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29566586/1664960560804-a1173780-e7d6-4770-a67c-b71fcdb41ce0.png#clientId=ua739d8ef-ce07-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=102&id=uea49d8b9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=127&originWidth=1058&originalType=binary&ratio=1&rotation=0&showTitle=false&size=64547&status=done&style=none&taskId=u84e424e2-824a-45d6-b7ee-63d10860776&title=&width=846.4" alt="image.png"><br>   反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.创建流对象</span><br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\data.dat&quot;</span>));<br><br><span class="hljs-comment">// 2.读取， 注意顺序</span><br>System.out.println(ois.readInt());<br>System.out.println(ois.readBoolean());<br>System.out.println(ois.readChar());<br>System.out.println(ois.readDouble());<br>System.out.println(ois.readUTF());<br>System.out.println(ois.readObject());<br>System.out.println(ois.readObject());<br>System.out.println(ois.readObject());<br><span class="hljs-comment">// 3.关闭</span><br>ois.close();<br>System.out.println(<span class="hljs-string">&quot;以反序列化的方式读取(恢复)ok~&quot;</span>);<br><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意事项和细节说明</strong></p></blockquote><ol><li>读写顺序要一致。</li><li>要求序列化或反序列化对象实现Serializable。</li><li>序列化的类中建议添加SeriaVersionUID，为了提高版本的兼容性。</li><li>序列化对象时，默认将里面所有属性都进行序列化，但除了static或transient修饰的成员。</li><li>序列化对象时，要求里面属性的类型也需要实现序列化接口。</li><li>序列化具备可继承性，也就是如果某类已经实现了序列化，则它的所有子类也已经默认实现了序列化。</li></ol><h4 id="3、实现Cloneable接口"><a href="#3、实现Cloneable接口" class="headerlink" title="3、实现Cloneable接口"></a>3、实现Cloneable接口</h4><pre><code class="hljs">实现Cloneable接口表示可以使用clone()拷贝方法。</code></pre><ul><li>ArrayList实现浅拷贝<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>arrayList.add(<span class="hljs-string">&quot;1&quot;</span>);<br>arrayList.add(<span class="hljs-string">&quot;2&quot;</span>);<br>arrayList.add(<span class="hljs-string">&quot;3&quot;</span>);<br><span class="hljs-type">ArrayList</span> <span class="hljs-variable">cloneList</span> <span class="hljs-operator">=</span> (ArrayList)arrayList.clone();<br>System.out.println(arrayList == cloneList); <span class="hljs-comment">//fal</span><br>System.out.println(arrayList);<br>System.out.println(cloneList);<br></code></pre></td></tr></table></figure><blockquote><p>💡 拷贝的数据是不同地址的，数据值完全一致</p></blockquote></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29566586/1664962182741-afe55f83-128f-4f4a-a9e9-46e94a4f7e78.png#clientId=ua739d8ef-ce07-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=87&id=u210bfa2d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=109&originWidth=243&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5764&status=done&style=none&taskId=ucc666070-2753-4caa-8cfa-b478c7ad1be&title=&width=194.40000915527344" alt="image.png"><br>Java深入理解深拷贝和浅拷贝区别可看这篇文章<a href="https://blog.csdn.net/riemann_/article/details/87217229?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166496289916800186569102%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166496289916800186569102&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-87217229-null-null.142%5Ev51%5Enew_blog_pos_by_title,201%5Ev3%5Eadd_ask&utm_term=java%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">深拷贝和浅拷贝的区别</a><br><a href="https://blog.csdn.net/weixin_43779185/article/details/116199177"></a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="/2022/10/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2022/10/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/04/hello-world/"/>
    <url>/2022/10/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
